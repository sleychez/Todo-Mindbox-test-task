{"version":3,"sources":["components/Header/Header.tsx","components/Input/Input.tsx","components/TodoItem/TodoItem.tsx","components/TodosList/TodosList.tsx","components/Button/Button.tsx","components/Todos/Todos.tsx","App.tsx","index.tsx"],"names":["Header","className","Input","placeholder","iconName","onKeyPress","useState","value","setValue","id","split","join","Date","now","e","key","onChange","target","type","htmlFor","TodoItem","todo","deleteHandler","completeHandler","onClick","bind","checked","completed","undefined","text","TodoList","todos","elements","map","Button","isActive","Todos","setTodos","filter","setFilter","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","changeFilter","tasksForTodoList","t","newTodo","prev","length","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c84e046d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header: React.FC = () => (\n  <nav className='header purple darken-1'>\n    <div className=\"nav-wrapper\">\n      <span className=\"brand-logo\">React + Typescript Todo</span>\n    </div>\n  </nav>\n)\n\nexport default Header","import React, {useState} from 'react'\n\ntype InputProps = {\n  placeholder: string,\n  iconName: string,\n  onKeyPress: (value: string) => void\n}\n\nconst Input: React.FC<InputProps> = ({placeholder, iconName, onKeyPress}) => {\n  const [value, setValue] = useState('')\n\n  const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value)\n\n  const pressKeyHandler = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onKeyPress(value)\n      setValue('')\n    }\n  }\n\n  const id: string = `input-${placeholder.split(' ').join('-')}-${Date.now()}`\n\n  return (\n    <div className=\"input-field addInput\">\n      <i className=\"material-icons prefix\">{iconName}</i>\n      <input onKeyPress={pressKeyHandler} value={value} onChange={changeHandler} id={id} type=\"text\"\n             className=\"validate\" placeholder={placeholder}/>\n      <label htmlFor={id}/>\n    </div>\n  )\n}\n\nexport default Input","import React from 'react'\nimport {ITodo} from \"../../interfaces\";\n\ntype TodoProps = {\n  todo: ITodo,\n  deleteHandler: (id: number) => void,\n  completeHandler: (id: number) => void\n}\n\nconst TodoItem: React.FC<TodoProps> = ({todo, deleteHandler, completeHandler}) => (\n  <li className='todo' onClick={completeHandler.bind(null, todo.id)}>\n    <input type='checkbox' checked={todo.completed}/>\n    <span className={todo.completed ? 'completed' : undefined}>{todo.text}</span>\n    <i onClick={deleteHandler.bind(null, todo.id)} className=\"material-icons prefix delete\">delete</i>\n  </li>\n)\n\nexport default TodoItem","import React from 'react'\nimport {ITodo} from \"../../interfaces\";\nimport TodoItem from \"../TodoItem/TodoItem\";\n\ntype TodoListProps = {\n  todos: ITodo[],\n  deleteHandler: (id: number) => void,\n  completeHandler: (id: number) => void\n}\n\nconst TodoList: React.FC<TodoListProps> = ({todos, deleteHandler, completeHandler}) => {\n  const elements = todos.map(todo => {\n\n    return <TodoItem key={todo.id} todo={todo} deleteHandler={deleteHandler} completeHandler={completeHandler}/>\n  })\n  return (\n    <ul>\n      {elements}\n    </ul>\n  )\n}\n\nexport default TodoList","import React, {FC} from 'react';\r\n\r\n\r\ntype ButtonProps = {\r\n  onClick?: () => void;\r\n  text?: string | number;\r\n  isActive: boolean\r\n};\r\n\r\nconst Button: FC<ButtonProps> = ({onClick, text, isActive}) => {\r\n  return <button className={`button ${isActive ? 'active' : ''} `} onClick={onClick}>\r\n    {text}\r\n  </button>;\r\n};\r\n\r\n\r\nexport default Button;","import React, {useEffect, useState} from 'react'\nimport Input from \"../Input/Input\";\nimport {ITodo} from \"../../interfaces\";\nimport TodoList from \"../TodosList/TodosList\";\nimport Button from \"../Button/Button\";\n\n\nexport type FilterValuesType = 'all' | 'completed' | 'active'\n\nconst Todos: React.FC = () => {\n\n  const [todos, setTodos] = useState<ITodo[]>([])\n  const [filter, setFilter] = useState<FilterValuesType>('all')\n\n  useEffect(() => {\n    const todos = JSON.parse(localStorage.getItem('todos') || '[]')\n    setTodos(todos)\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }, [todos])\n\n  const addTodo = (text: string) => {\n    const newTodo: ITodo = {\n      id: Date.now(),\n      text,\n      completed: false\n    }\n    setTodos(prev => [newTodo, ...prev]);\n  }\n\n  const deleteTodo = (id: number) => {\n    setTodos(prev => prev.filter(todo => todo.id !== id))\n  }\n\n  const toggleCompleteTodo = (id: number) => {\n    setTodos(prev => prev.map(todo => todo.id === id ? {...todo, completed: !todo.completed} : todo))\n  }\n\n  const changeFilter = (value: FilterValuesType) => {\n    setFilter(value)\n  }\n\n  let tasksForTodoList = todos\n  if (filter === 'completed') {\n    tasksForTodoList = todos.filter(t => t.completed === true)\n  }\n  if (filter === 'active') {\n    tasksForTodoList = todos.filter(t => t.completed === false)\n  }\n\n\n  return (\n    <>\n      <Input placeholder={'Add todo'} iconName={'create'} onKeyPress={addTodo}/>\n      {todos.length ?\n        <div className='filters'>\n          <Button onClick={() => {\n            changeFilter('all')\n          }} text={'All'} isActive={filter === 'all'}/>\n          <Button onClick={() => {\n            changeFilter('active')\n          }} text={'Active'} isActive={filter === 'active'}/>\n          <Button onClick={() => {\n            changeFilter('completed')\n          }} text={'Completed'} isActive={filter === 'completed'}/>\n        </div> : ''}\n      <TodoList todos={tasksForTodoList} deleteHandler={deleteTodo} completeHandler={toggleCompleteTodo}/>\n    </>\n  )\n}\n\nexport default Todos;","import React from 'react';\nimport Header from './components/Header/Header';\nimport Todos from './components/Todos/Todos';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Header/>\n      <Todos/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}